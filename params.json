{"name":"Stm32f0xx stm32cube stripped","tagline":"A template for deveolping for the stm32f0 range of microcontrollers, by default set to stm32f030f4","body":"### A Makefile for using the stm32f030f4 with the stm32cube Library\r\nTo get this Makefile (actually you need the Linker file too) just download the repository.\r\nTo actually fully use it, you need openocd, arm-none-eabi-gcc, arm-none-eabi-gdb and an editor. You should be able to get them from the packet manager of your Linux distribution. If you’re on Windows or OS X, just search the Internet for advice.\r\nThis Template follows the Structure of STs Template. The Cube Library is in ./Lib, “your” C files are in ./Src and your .h files are in ./Inc. If you come from the AVR(or similar), there are some new things to learn.\r\n\r\nYou should provide a Startup file (typically written in Assembler), that initialises the processor for your c program. This startupfile is written by ST and first calls SystemInit, before your main function (Yeah, main is just a function[more or less]). SystemInint sets all the important Registers to their default values. This function is hidden inside the system_stm32f0xx.c file.\r\nYou have to provide a linker file (.ld) that tells the compiler, where the ram and flash start and end, because while it’s included in the avr-gcc compiler, here you can’t possibly store all arm core chips properties in your compiler.\r\nYou almost never directly access the registers. For that you use the Library, because ARM MCUs almost always have enough space (the cheapest one on digikey for 0.60$ still has 8KBs flash). You of course have the option to access them, but I wouldn’t do that.\r\nThere are next to none in DIP packages, so get ready to buy adapter boards and solder smd.\r\nFor the stm32 micros, debuggers are extremely cheap (~5$ of ebay, ~20 $ directly from ST), so just spare yourself the hassle of not using a debugger, if you plan to use them (and not only try them once, for that you have the integrated boot loader)\r\n\r\nThe Makefile has three useful targets\r\n* all/ (none) compiles everything that has changed since the last run\r\n* flash needs all as a prerequisite and flashes the .elf file to the MCU (defined in the openocd.cfg)\r\n* clean forces the compiler to compile everything again (useful when changing compiler flags)\r\n\r\nThe program in main.c just blinks an Led with 1Hz on PA4. You can read the comments, to inform yourself about whats going on. If you want to know more, read the stm32f0xx family data sheet, the Hal driver descriptions. I plan on publishing tutorials on this Blog too.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}